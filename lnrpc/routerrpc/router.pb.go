// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routerrpc/router.proto

package routerrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	lnrpc "github.com/lightningnetwork/lnd/lnrpc"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PaymentState int32

const (
	//*
	//Payment is still in flight.
	PaymentState_IN_FLIGHT PaymentState = 0
	//*
	//Payment completed successfully.
	PaymentState_SUCCEEDED PaymentState = 1
	//*
	//There are more routes to try, but the payment timeout was exceeded.
	PaymentState_FAILED_TIMEOUT PaymentState = 2
	//*
	//All possible routes were tried and failed permanently. Or were no
	//routes to the destination at all.
	PaymentState_FAILED_NO_ROUTE PaymentState = 3
)

var PaymentState_name = map[int32]string{
	0: "IN_FLIGHT",
	1: "SUCCEEDED",
	2: "FAILED_TIMEOUT",
	3: "FAILED_NO_ROUTE",
}

var PaymentState_value = map[string]int32{
	"IN_FLIGHT":       0,
	"SUCCEEDED":       1,
	"FAILED_TIMEOUT":  2,
	"FAILED_NO_ROUTE": 3,
}

func (x PaymentState) String() string {
	return proto.EnumName(PaymentState_name, int32(x))
}

func (PaymentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{0}
}

type Failure_FailureCode int32

const (
	//*
	//The numbers assigned in this enumeration match the failure codes as
	//defined in BOLT #4. Because protobuf 3 requires enums to start with 0,
	//a RESERVED value is added.
	Failure_RESERVED                         Failure_FailureCode = 0
	Failure_UNKNOWN_PAYMENT_HASH             Failure_FailureCode = 1
	Failure_INCORRECT_PAYMENT_AMOUNT         Failure_FailureCode = 2
	Failure_FINAL_INCORRECT_CLTV_EXPIRY      Failure_FailureCode = 3
	Failure_FINAL_INCORRECT_HTLC_AMOUNT      Failure_FailureCode = 4
	Failure_FINAL_EXPIRY_TOO_SOON            Failure_FailureCode = 5
	Failure_INVALID_REALM                    Failure_FailureCode = 6
	Failure_EXPIRY_TOO_SOON                  Failure_FailureCode = 7
	Failure_INVALID_ONION_VERSION            Failure_FailureCode = 8
	Failure_INVALID_ONION_HMAC               Failure_FailureCode = 9
	Failure_INVALID_ONION_KEY                Failure_FailureCode = 10
	Failure_AMOUNT_BELOW_MINIMUM             Failure_FailureCode = 11
	Failure_FEE_INSUFFICIENT                 Failure_FailureCode = 12
	Failure_INCORRECT_CLTV_EXPIRY            Failure_FailureCode = 13
	Failure_CHANNEL_DISABLED                 Failure_FailureCode = 14
	Failure_TEMPORARY_CHANNEL_FAILURE        Failure_FailureCode = 15
	Failure_REQUIRED_NODE_FEATURE_MISSING    Failure_FailureCode = 16
	Failure_REQUIRED_CHANNEL_FEATURE_MISSING Failure_FailureCode = 17
	Failure_UNKNOWN_NEXT_PEER                Failure_FailureCode = 18
	Failure_TEMPORARY_NODE_FAILURE           Failure_FailureCode = 19
	Failure_PERMANENT_NODE_FAILURE           Failure_FailureCode = 20
	Failure_PERMANENT_CHANNEL_FAILURE        Failure_FailureCode = 21
)

var Failure_FailureCode_name = map[int32]string{
	0:  "RESERVED",
	1:  "UNKNOWN_PAYMENT_HASH",
	2:  "INCORRECT_PAYMENT_AMOUNT",
	3:  "FINAL_INCORRECT_CLTV_EXPIRY",
	4:  "FINAL_INCORRECT_HTLC_AMOUNT",
	5:  "FINAL_EXPIRY_TOO_SOON",
	6:  "INVALID_REALM",
	7:  "EXPIRY_TOO_SOON",
	8:  "INVALID_ONION_VERSION",
	9:  "INVALID_ONION_HMAC",
	10: "INVALID_ONION_KEY",
	11: "AMOUNT_BELOW_MINIMUM",
	12: "FEE_INSUFFICIENT",
	13: "INCORRECT_CLTV_EXPIRY",
	14: "CHANNEL_DISABLED",
	15: "TEMPORARY_CHANNEL_FAILURE",
	16: "REQUIRED_NODE_FEATURE_MISSING",
	17: "REQUIRED_CHANNEL_FEATURE_MISSING",
	18: "UNKNOWN_NEXT_PEER",
	19: "TEMPORARY_NODE_FAILURE",
	20: "PERMANENT_NODE_FAILURE",
	21: "PERMANENT_CHANNEL_FAILURE",
}

var Failure_FailureCode_value = map[string]int32{
	"RESERVED":                         0,
	"UNKNOWN_PAYMENT_HASH":             1,
	"INCORRECT_PAYMENT_AMOUNT":         2,
	"FINAL_INCORRECT_CLTV_EXPIRY":      3,
	"FINAL_INCORRECT_HTLC_AMOUNT":      4,
	"FINAL_EXPIRY_TOO_SOON":            5,
	"INVALID_REALM":                    6,
	"EXPIRY_TOO_SOON":                  7,
	"INVALID_ONION_VERSION":            8,
	"INVALID_ONION_HMAC":               9,
	"INVALID_ONION_KEY":                10,
	"AMOUNT_BELOW_MINIMUM":             11,
	"FEE_INSUFFICIENT":                 12,
	"INCORRECT_CLTV_EXPIRY":            13,
	"CHANNEL_DISABLED":                 14,
	"TEMPORARY_CHANNEL_FAILURE":        15,
	"REQUIRED_NODE_FEATURE_MISSING":    16,
	"REQUIRED_CHANNEL_FEATURE_MISSING": 17,
	"UNKNOWN_NEXT_PEER":                18,
	"TEMPORARY_NODE_FAILURE":           19,
	"PERMANENT_NODE_FAILURE":           20,
	"PERMANENT_CHANNEL_FAILURE":        21,
}

func (x Failure_FailureCode) String() string {
	return proto.EnumName(Failure_FailureCode_name, int32(x))
}

func (Failure_FailureCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{8, 0}
}

type SendPaymentRequest struct {
	/// The identity pubkey of the payment recipient
	Dest []byte `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	/// Number of satoshis to send.
	Amt int64 `protobuf:"varint,2,opt,name=amt,proto3" json:"amt,omitempty"`
	/// The hash to use within the payment's HTLC
	PaymentHash []byte `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	//*
	//The CLTV delta from the current height that should be used to set the
	//timelock for the final hop.
	FinalCltvDelta int32 `protobuf:"varint,4,opt,name=final_cltv_delta,json=finalCltvDelta,proto3" json:"final_cltv_delta,omitempty"`
	//*
	//A bare-bones invoice for a payment within the Lightning Network.  With the
	//details of the invoice, the sender has all the data necessary to send a
	//payment to the recipient. The amount in the payment request may be zero. In
	//that case it is required to set the amt field as well. If no payment request
	//is specified, the following fields are required: dest, amt and payment_hash.
	PaymentRequest string `protobuf:"bytes,5,opt,name=payment_request,json=paymentRequest,proto3" json:"payment_request,omitempty"`
	//*
	//An upper limit on the amount of time we should spend when attempting to
	//fulfill the payment. This is expressed in seconds. If we cannot make a
	//successful payment within this time frame, an error will be returned.
	//This field must be non-zero.
	TimeoutSeconds int32 `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	//*
	//The maximum number of satoshis that will be paid as a fee of the payment.
	//If this field is left to the default value of 0, only zero-fee routes will
	//be considered. This usually means single hop routes connecting directly to
	//the destination. To send the payment without a fee limit, use max int here.
	FeeLimit int64 `protobuf:"varint,7,opt,name=fee_limit,json=feeLimit,proto3" json:"fee_limit,omitempty"`
	//*
	//The channel id of the channel that must be taken to the first hop. If zero,
	//any channel may be used.
	OutgoingChanId uint64 `protobuf:"varint,8,opt,name=outgoing_chan_id,json=outgoingChanId,proto3" json:"outgoing_chan_id,omitempty"`
	//*
	//An optional maximum total time lock for the route. If zero, there is no
	//maximum enforced.
	CltvLimit            int32    `protobuf:"varint,9,opt,name=cltv_limit,json=cltvLimit,proto3" json:"cltv_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendPaymentRequest) Reset()         { *m = SendPaymentRequest{} }
func (m *SendPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*SendPaymentRequest) ProtoMessage()    {}
func (*SendPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{0}
}

func (m *SendPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendPaymentRequest.Unmarshal(m, b)
}
func (m *SendPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendPaymentRequest.Marshal(b, m, deterministic)
}
func (m *SendPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPaymentRequest.Merge(m, src)
}
func (m *SendPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_SendPaymentRequest.Size(m)
}
func (m *SendPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendPaymentRequest proto.InternalMessageInfo

func (m *SendPaymentRequest) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *SendPaymentRequest) GetAmt() int64 {
	if m != nil {
		return m.Amt
	}
	return 0
}

func (m *SendPaymentRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *SendPaymentRequest) GetFinalCltvDelta() int32 {
	if m != nil {
		return m.FinalCltvDelta
	}
	return 0
}

func (m *SendPaymentRequest) GetPaymentRequest() string {
	if m != nil {
		return m.PaymentRequest
	}
	return ""
}

func (m *SendPaymentRequest) GetTimeoutSeconds() int32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *SendPaymentRequest) GetFeeLimit() int64 {
	if m != nil {
		return m.FeeLimit
	}
	return 0
}

func (m *SendPaymentRequest) GetOutgoingChanId() uint64 {
	if m != nil {
		return m.OutgoingChanId
	}
	return 0
}

func (m *SendPaymentRequest) GetCltvLimit() int32 {
	if m != nil {
		return m.CltvLimit
	}
	return 0
}

type SendPaymentResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendPaymentResponse) Reset()         { *m = SendPaymentResponse{} }
func (m *SendPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*SendPaymentResponse) ProtoMessage()    {}
func (*SendPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{1}
}

func (m *SendPaymentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendPaymentResponse.Unmarshal(m, b)
}
func (m *SendPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendPaymentResponse.Marshal(b, m, deterministic)
}
func (m *SendPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPaymentResponse.Merge(m, src)
}
func (m *SendPaymentResponse) XXX_Size() int {
	return xxx_messageInfo_SendPaymentResponse.Size(m)
}
func (m *SendPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendPaymentResponse proto.InternalMessageInfo

type LookupPaymentRequest struct {
	/// The hash of the payment to look up.
	PaymentHash          []byte   `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupPaymentRequest) Reset()         { *m = LookupPaymentRequest{} }
func (m *LookupPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*LookupPaymentRequest) ProtoMessage()    {}
func (*LookupPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{2}
}

func (m *LookupPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupPaymentRequest.Unmarshal(m, b)
}
func (m *LookupPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupPaymentRequest.Marshal(b, m, deterministic)
}
func (m *LookupPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupPaymentRequest.Merge(m, src)
}
func (m *LookupPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_LookupPaymentRequest.Size(m)
}
func (m *LookupPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupPaymentRequest proto.InternalMessageInfo

func (m *LookupPaymentRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

type PaymentStatus struct {
	/// Current state the payment is in.
	State PaymentState `protobuf:"varint,1,opt,name=state,proto3,enum=routerrpc.PaymentState" json:"state,omitempty"`
	//*
	//The pre-image of the payment when state is SUCCEEDED.
	Preimage []byte `protobuf:"bytes,2,opt,name=preimage,proto3" json:"preimage,omitempty"`
	//*
	//The taken route when state is SUCCEEDED.
	Route                *lnrpc.Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PaymentStatus) Reset()         { *m = PaymentStatus{} }
func (m *PaymentStatus) String() string { return proto.CompactTextString(m) }
func (*PaymentStatus) ProtoMessage()    {}
func (*PaymentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{3}
}

func (m *PaymentStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentStatus.Unmarshal(m, b)
}
func (m *PaymentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentStatus.Marshal(b, m, deterministic)
}
func (m *PaymentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentStatus.Merge(m, src)
}
func (m *PaymentStatus) XXX_Size() int {
	return xxx_messageInfo_PaymentStatus.Size(m)
}
func (m *PaymentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentStatus proto.InternalMessageInfo

func (m *PaymentStatus) GetState() PaymentState {
	if m != nil {
		return m.State
	}
	return PaymentState_IN_FLIGHT
}

func (m *PaymentStatus) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *PaymentStatus) GetRoute() *lnrpc.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

type RouteFeeRequest struct {
	//*
	//The destination once wishes to obtain a routing fee quote to.
	Dest []byte `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	//*
	//The amount one wishes to send to the target destination.
	AmtSat               int64    `protobuf:"varint,2,opt,name=amt_sat,json=amtSat,proto3" json:"amt_sat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteFeeRequest) Reset()         { *m = RouteFeeRequest{} }
func (m *RouteFeeRequest) String() string { return proto.CompactTextString(m) }
func (*RouteFeeRequest) ProtoMessage()    {}
func (*RouteFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{4}
}

func (m *RouteFeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteFeeRequest.Unmarshal(m, b)
}
func (m *RouteFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteFeeRequest.Marshal(b, m, deterministic)
}
func (m *RouteFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteFeeRequest.Merge(m, src)
}
func (m *RouteFeeRequest) XXX_Size() int {
	return xxx_messageInfo_RouteFeeRequest.Size(m)
}
func (m *RouteFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteFeeRequest proto.InternalMessageInfo

func (m *RouteFeeRequest) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *RouteFeeRequest) GetAmtSat() int64 {
	if m != nil {
		return m.AmtSat
	}
	return 0
}

type RouteFeeResponse struct {
	//*
	//A lower bound of the estimated fee to the target destination within the
	//network, expressed in milli-satoshis.
	RoutingFeeMsat int64 `protobuf:"varint,1,opt,name=routing_fee_msat,json=routingFeeMsat,proto3" json:"routing_fee_msat,omitempty"`
	//*
	//An estimate of the worst case time delay that can occur. Note that callers
	//will still need to factor in the final CLTV delta of the last hop into this
	//value.
	TimeLockDelay        int64    `protobuf:"varint,2,opt,name=time_lock_delay,json=timeLockDelay,proto3" json:"time_lock_delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteFeeResponse) Reset()         { *m = RouteFeeResponse{} }
func (m *RouteFeeResponse) String() string { return proto.CompactTextString(m) }
func (*RouteFeeResponse) ProtoMessage()    {}
func (*RouteFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{5}
}

func (m *RouteFeeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteFeeResponse.Unmarshal(m, b)
}
func (m *RouteFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteFeeResponse.Marshal(b, m, deterministic)
}
func (m *RouteFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteFeeResponse.Merge(m, src)
}
func (m *RouteFeeResponse) XXX_Size() int {
	return xxx_messageInfo_RouteFeeResponse.Size(m)
}
func (m *RouteFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteFeeResponse proto.InternalMessageInfo

func (m *RouteFeeResponse) GetRoutingFeeMsat() int64 {
	if m != nil {
		return m.RoutingFeeMsat
	}
	return 0
}

func (m *RouteFeeResponse) GetTimeLockDelay() int64 {
	if m != nil {
		return m.TimeLockDelay
	}
	return 0
}

type SendToRouteRequest struct {
	/// The payment hash to use for the HTLC.
	PaymentHash []byte `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	/// Route that should be used to attempt to complete the payment.
	Route                *lnrpc.Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SendToRouteRequest) Reset()         { *m = SendToRouteRequest{} }
func (m *SendToRouteRequest) String() string { return proto.CompactTextString(m) }
func (*SendToRouteRequest) ProtoMessage()    {}
func (*SendToRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{6}
}

func (m *SendToRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendToRouteRequest.Unmarshal(m, b)
}
func (m *SendToRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendToRouteRequest.Marshal(b, m, deterministic)
}
func (m *SendToRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToRouteRequest.Merge(m, src)
}
func (m *SendToRouteRequest) XXX_Size() int {
	return xxx_messageInfo_SendToRouteRequest.Size(m)
}
func (m *SendToRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendToRouteRequest proto.InternalMessageInfo

func (m *SendToRouteRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *SendToRouteRequest) GetRoute() *lnrpc.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

type SendToRouteResponse struct {
	/// The preimage obtained by making the payment.
	Preimage []byte `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	/// The failure message in case the payment failed.
	Failure              *Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendToRouteResponse) Reset()         { *m = SendToRouteResponse{} }
func (m *SendToRouteResponse) String() string { return proto.CompactTextString(m) }
func (*SendToRouteResponse) ProtoMessage()    {}
func (*SendToRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{7}
}

func (m *SendToRouteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendToRouteResponse.Unmarshal(m, b)
}
func (m *SendToRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendToRouteResponse.Marshal(b, m, deterministic)
}
func (m *SendToRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToRouteResponse.Merge(m, src)
}
func (m *SendToRouteResponse) XXX_Size() int {
	return xxx_messageInfo_SendToRouteResponse.Size(m)
}
func (m *SendToRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendToRouteResponse proto.InternalMessageInfo

func (m *SendToRouteResponse) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *SendToRouteResponse) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type Failure struct {
	/// Failure code as defined in the Lightning spec
	Code Failure_FailureCode `protobuf:"varint,1,opt,name=code,proto3,enum=routerrpc.Failure_FailureCode" json:"code,omitempty"`
	//*
	//The node pubkey of the intermediate or final node that generated the failure
	//message.
	FailureSourcePubkey []byte `protobuf:"bytes,2,opt,name=failure_source_pubkey,json=failureSourcePubkey,proto3" json:"failure_source_pubkey,omitempty"`
	/// An optional channel update message.
	ChannelUpdate *ChannelUpdate `protobuf:"bytes,3,opt,name=channel_update,json=channelUpdate,proto3" json:"channel_update,omitempty"`
	/// A failure type-dependent htlc value.
	HtlcMsat uint64 `protobuf:"varint,4,opt,name=htlc_msat,json=htlcMsat,proto3" json:"htlc_msat,omitempty"`
	/// The sha256 sum of the onion payload.
	OnionSha_256 []byte `protobuf:"bytes,5,opt,name=onion_sha_256,json=onionSha256,proto3" json:"onion_sha_256,omitempty"`
	/// A failure type-dependent cltv expiry value.
	CltvExpiry uint32 `protobuf:"varint,6,opt,name=cltv_expiry,json=cltvExpiry,proto3" json:"cltv_expiry,omitempty"`
	/// A failure type-dependent flags value.
	Flags                uint32   `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{8}
}

func (m *Failure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Failure.Unmarshal(m, b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return xxx_messageInfo_Failure.Size(m)
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetCode() Failure_FailureCode {
	if m != nil {
		return m.Code
	}
	return Failure_RESERVED
}

func (m *Failure) GetFailureSourcePubkey() []byte {
	if m != nil {
		return m.FailureSourcePubkey
	}
	return nil
}

func (m *Failure) GetChannelUpdate() *ChannelUpdate {
	if m != nil {
		return m.ChannelUpdate
	}
	return nil
}

func (m *Failure) GetHtlcMsat() uint64 {
	if m != nil {
		return m.HtlcMsat
	}
	return 0
}

func (m *Failure) GetOnionSha_256() []byte {
	if m != nil {
		return m.OnionSha_256
	}
	return nil
}

func (m *Failure) GetCltvExpiry() uint32 {
	if m != nil {
		return m.CltvExpiry
	}
	return 0
}

func (m *Failure) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type ChannelUpdate struct {
	// Signature is used to validate the announced data and prove the
	// ownership of node id.
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// ChainHash denotes the target chain that this channel was opened
	// within. This value should be the genesis hash of the target chain.
	// Along with the short channel ID, this uniquely identifies the
	// channel globally in a blockchain.
	ChainHash []byte `protobuf:"bytes,2,opt,name=chain_hash,json=chainHash,proto3" json:"chain_hash,omitempty"`
	// ShortChannelID is the unique description of the funding transaction.
	ChanId uint64 `protobuf:"varint,3,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	// Timestamp allows ordering in the case of multiple announcements.  We
	// should ignore the message if timestamp is not greater than
	// the last-received.
	Timestamp uint32 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Flags is a bitfield that describes additional meta-data concerning
	// how the update is to be interpreted. Currently, the
	// least-significant bit must be set to 0 if the creating node
	// corresponds to the first node in the previously sent channel
	// announcement and 1 otherwise. If the second bit is set, then the
	// channel is set to be disabled.
	ChannelFlags uint32 `protobuf:"varint,5,opt,name=channel_flags,json=channelFlags,proto3" json:"channel_flags,omitempty"`
	// TimeLockDelta is the minimum number of blocks this node requires to
	// be added to the expiry of HTLCs. This is a security parameter
	// determined by the node operator. This value represents the required
	// gap between the time locks of the incoming and outgoing HTLC's set
	// to this node.
	TimeLockDelta uint32 `protobuf:"varint,6,opt,name=time_lock_delta,json=timeLockDelta,proto3" json:"time_lock_delta,omitempty"`
	// HtlcMinimumMsat is the minimum HTLC value which will be accepted.
	HtlcMinimumMsat uint64 `protobuf:"varint,7,opt,name=htlc_minimum_msat,json=htlcMinimumMsat,proto3" json:"htlc_minimum_msat,omitempty"`
	// BaseFee is the base fee that must be used for incoming HTLC's to
	// this particular channel. This value will be tacked onto the required
	// for a payment independent of the size of the payment.
	BaseFee uint32 `protobuf:"varint,8,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	// FeeRate is the fee rate that will be charged per millionth of a
	// satoshi.
	FeeRate              uint32   `protobuf:"varint,9,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelUpdate) Reset()         { *m = ChannelUpdate{} }
func (m *ChannelUpdate) String() string { return proto.CompactTextString(m) }
func (*ChannelUpdate) ProtoMessage()    {}
func (*ChannelUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a0613f69d37b0a5, []int{9}
}

func (m *ChannelUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelUpdate.Unmarshal(m, b)
}
func (m *ChannelUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelUpdate.Marshal(b, m, deterministic)
}
func (m *ChannelUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelUpdate.Merge(m, src)
}
func (m *ChannelUpdate) XXX_Size() int {
	return xxx_messageInfo_ChannelUpdate.Size(m)
}
func (m *ChannelUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelUpdate proto.InternalMessageInfo

func (m *ChannelUpdate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ChannelUpdate) GetChainHash() []byte {
	if m != nil {
		return m.ChainHash
	}
	return nil
}

func (m *ChannelUpdate) GetChanId() uint64 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ChannelUpdate) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChannelUpdate) GetChannelFlags() uint32 {
	if m != nil {
		return m.ChannelFlags
	}
	return 0
}

func (m *ChannelUpdate) GetTimeLockDelta() uint32 {
	if m != nil {
		return m.TimeLockDelta
	}
	return 0
}

func (m *ChannelUpdate) GetHtlcMinimumMsat() uint64 {
	if m != nil {
		return m.HtlcMinimumMsat
	}
	return 0
}

func (m *ChannelUpdate) GetBaseFee() uint32 {
	if m != nil {
		return m.BaseFee
	}
	return 0
}

func (m *ChannelUpdate) GetFeeRate() uint32 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

func init() {
	proto.RegisterEnum("routerrpc.PaymentState", PaymentState_name, PaymentState_value)
	proto.RegisterEnum("routerrpc.Failure_FailureCode", Failure_FailureCode_name, Failure_FailureCode_value)
	proto.RegisterType((*SendPaymentRequest)(nil), "routerrpc.SendPaymentRequest")
	proto.RegisterType((*SendPaymentResponse)(nil), "routerrpc.SendPaymentResponse")
	proto.RegisterType((*LookupPaymentRequest)(nil), "routerrpc.LookupPaymentRequest")
	proto.RegisterType((*PaymentStatus)(nil), "routerrpc.PaymentStatus")
	proto.RegisterType((*RouteFeeRequest)(nil), "routerrpc.RouteFeeRequest")
	proto.RegisterType((*RouteFeeResponse)(nil), "routerrpc.RouteFeeResponse")
	proto.RegisterType((*SendToRouteRequest)(nil), "routerrpc.SendToRouteRequest")
	proto.RegisterType((*SendToRouteResponse)(nil), "routerrpc.SendToRouteResponse")
	proto.RegisterType((*Failure)(nil), "routerrpc.Failure")
	proto.RegisterType((*ChannelUpdate)(nil), "routerrpc.ChannelUpdate")
}

func init() { proto.RegisterFile("routerrpc/router.proto", fileDescriptor_7a0613f69d37b0a5) }

var fileDescriptor_7a0613f69d37b0a5 = []byte{
	// 1293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x72, 0x1a, 0xc7,
	0x12, 0x36, 0x12, 0x08, 0x68, 0xfe, 0x56, 0x23, 0xc9, 0xc6, 0xd8, 0xb2, 0x65, 0xce, 0xa9, 0x63,
	0x95, 0xeb, 0x44, 0x4a, 0x48, 0xd9, 0x55, 0xb9, 0x49, 0x0a, 0xc3, 0x60, 0xb6, 0xbc, 0xec, 0x92,
	0xd9, 0x45, 0xb6, 0x92, 0x8b, 0xa9, 0x11, 0x8c, 0x60, 0x4b, 0xb0, 0x4b, 0xd8, 0xc1, 0x89, 0x6e,
	0x72, 0x99, 0x07, 0xca, 0x0b, 0xf8, 0x39, 0xf2, 0x36, 0xa9, 0x99, 0x59, 0x7e, 0x25, 0xa7, 0x72,
	0xc5, 0xce, 0xd7, 0x3f, 0xd3, 0xd3, 0xdd, 0x5f, 0x37, 0xf0, 0x70, 0x16, 0xce, 0x05, 0x9f, 0xcd,
	0xa6, 0xfd, 0x73, 0xfd, 0x75, 0x36, 0x9d, 0x85, 0x22, 0x44, 0xd9, 0x25, 0x5e, 0xc9, 0xce, 0xa6,
	0x7d, 0x8d, 0x56, 0x3f, 0xef, 0x00, 0x72, 0x79, 0x30, 0xe8, 0xb2, 0xdb, 0x09, 0x0f, 0x04, 0xe1,
	0xbf, 0xcc, 0x79, 0x24, 0x10, 0x82, 0xe4, 0x80, 0x47, 0xa2, 0x9c, 0x38, 0x49, 0x9c, 0xe6, 0x89,
	0xfa, 0x46, 0x06, 0xec, 0xb2, 0x89, 0x28, 0xef, 0x9c, 0x24, 0x4e, 0x77, 0x89, 0xfc, 0x44, 0x2f,
	0x20, 0x3f, 0xd5, 0x76, 0x74, 0xc4, 0xa2, 0x51, 0x79, 0x57, 0x69, 0xe7, 0x62, 0xac, 0xcd, 0xa2,
	0x11, 0x3a, 0x05, 0xe3, 0xda, 0x0f, 0xd8, 0x98, 0xf6, 0xc7, 0xe2, 0x13, 0x1d, 0xf0, 0xb1, 0x60,
	0xe5, 0xe4, 0x49, 0xe2, 0x34, 0x45, 0x8a, 0x0a, 0x6f, 0x8c, 0xc5, 0xa7, 0xa6, 0x44, 0xd1, 0x4b,
	0x28, 0x2d, 0x9c, 0xcd, 0x74, 0x14, 0xe5, 0xd4, 0x49, 0xe2, 0x34, 0x4b, 0x8a, 0xd3, 0xcd, 0xd8,
	0x5e, 0x42, 0x49, 0xf8, 0x13, 0x1e, 0xce, 0x05, 0x8d, 0x78, 0x3f, 0x0c, 0x06, 0x51, 0x79, 0x4f,
	0x7b, 0x8c, 0x61, 0x57, 0xa3, 0xe8, 0x09, 0x64, 0xaf, 0x39, 0xa7, 0x63, 0x7f, 0xe2, 0x8b, 0x72,
	0x5a, 0x85, 0x9d, 0xb9, 0xe6, 0xdc, 0x92, 0x67, 0x19, 0x58, 0x38, 0x17, 0xc3, 0xd0, 0x0f, 0x86,
	0xb4, 0x3f, 0x62, 0x01, 0xf5, 0x07, 0xe5, 0xcc, 0x49, 0xe2, 0x34, 0x49, 0x8a, 0x0b, 0xbc, 0x31,
	0x62, 0x81, 0x39, 0x40, 0xc7, 0x00, 0x2a, 0x78, 0xed, 0x27, 0xab, 0xae, 0xca, 0x4a, 0x44, 0x39,
	0xaa, 0x1e, 0xc1, 0xc1, 0x46, 0x02, 0xa3, 0x69, 0x18, 0x44, 0xbc, 0xfa, 0x1d, 0x1c, 0x5a, 0x61,
	0x78, 0x33, 0x9f, 0x6e, 0x65, 0x76, 0x3b, 0x67, 0x89, 0x3b, 0x39, 0xab, 0xfe, 0x0e, 0x85, 0xd8,
	0xc8, 0x15, 0x4c, 0xcc, 0x23, 0xf4, 0x15, 0xa4, 0x22, 0xc1, 0x04, 0x57, 0xca, 0xc5, 0xda, 0xa3,
	0xb3, 0x65, 0x29, 0xcf, 0xd6, 0x14, 0x39, 0xd1, 0x5a, 0xa8, 0x02, 0x99, 0xe9, 0x8c, 0xfb, 0x13,
	0x36, 0xe4, 0xaa, 0x5a, 0x79, 0xb2, 0x3c, 0xa3, 0x2a, 0xa4, 0x94, 0xb1, 0xaa, 0x55, 0xae, 0x96,
	0x3f, 0x1b, 0x07, 0xd2, 0x0d, 0x91, 0x18, 0xd1, 0xa2, 0xea, 0xf7, 0x50, 0x52, 0xe7, 0x16, 0xe7,
	0xff, 0xd4, 0x0f, 0x8f, 0x20, 0xcd, 0x26, 0x82, 0x46, 0x6c, 0xd1, 0x13, 0x7b, 0x6c, 0x22, 0x5c,
	0x26, 0xaa, 0x03, 0x30, 0x56, 0xf6, 0x3a, 0x1d, 0x32, 0xdd, 0xd2, 0xb9, 0xcc, 0xb6, 0xac, 0xc9,
	0x44, 0x5a, 0x25, 0x94, 0x55, 0x31, 0xc6, 0x5b, 0x9c, 0x77, 0x22, 0x26, 0xd0, 0xff, 0x74, 0x79,
	0xe9, 0x38, 0xec, 0xdf, 0xc8, 0x86, 0x61, 0xb7, 0xb1, 0xfb, 0x82, 0x84, 0xad, 0xb0, 0x7f, 0xd3,
	0x94, 0x60, 0xf5, 0x67, 0xdd, 0xb8, 0x5e, 0xa8, 0x63, 0xff, 0xd7, 0xe9, 0x5d, 0xa5, 0x60, 0xe7,
	0xcb, 0x29, 0xa0, 0xba, 0xa8, 0x4b, 0xe7, 0xf1, 0x2b, 0xd6, 0x33, 0x9b, 0xd8, 0xca, 0xec, 0xff,
	0x21, 0x7d, 0xcd, 0xfc, 0xf1, 0x7c, 0xb6, 0x70, 0x8c, 0xd6, 0xca, 0xd4, 0xd2, 0x12, 0xb2, 0x50,
	0xa9, 0xfe, 0x91, 0x86, 0x74, 0x0c, 0xa2, 0x1a, 0x24, 0xfb, 0xe1, 0x60, 0x51, 0xdd, 0x67, 0x77,
	0xcd, 0x16, 0xbf, 0x8d, 0x70, 0xc0, 0x89, 0xd2, 0x45, 0x35, 0x38, 0x8a, 0x5d, 0xd1, 0x28, 0x9c,
	0xcf, 0xfa, 0x9c, 0x4e, 0xe7, 0x57, 0x37, 0xfc, 0x36, 0x2e, 0xf8, 0x41, 0x2c, 0x74, 0x95, 0xac,
	0xab, 0x44, 0xe8, 0x07, 0x28, 0xca, 0x4e, 0x0f, 0xf8, 0x98, 0xce, 0xa7, 0x03, 0xb6, 0x6c, 0x82,
	0xf2, 0xda, 0x8d, 0x0d, 0xad, 0xd0, 0x53, 0x72, 0x52, 0xe8, 0xaf, 0x1f, 0x25, 0xa1, 0x46, 0x62,
	0xdc, 0xd7, 0xd5, 0x4b, 0x2a, 0xb2, 0x64, 0x24, 0xa0, 0xea, 0x56, 0x85, 0x42, 0x18, 0xf8, 0x61,
	0x40, 0xa3, 0x11, 0xa3, 0xb5, 0xd7, 0x6f, 0x14, 0x7b, 0xf3, 0x24, 0xa7, 0x40, 0x77, 0xc4, 0x6a,
	0xaf, 0xdf, 0xa0, 0xe7, 0x90, 0x53, 0x54, 0xe2, 0xbf, 0x4d, 0xfd, 0xd9, 0xad, 0xa2, 0x6d, 0x81,
	0x28, 0x76, 0x61, 0x85, 0xa0, 0x43, 0x48, 0x5d, 0x8f, 0xd9, 0x30, 0x52, 0x74, 0x2d, 0x10, 0x7d,
	0xa8, 0xfe, 0x95, 0x84, 0xdc, 0x5a, 0x0a, 0x50, 0x1e, 0x32, 0x04, 0xbb, 0x98, 0x5c, 0xe0, 0xa6,
	0xf1, 0x00, 0x95, 0xe1, 0xb0, 0x67, 0xbf, 0xb7, 0x9d, 0x0f, 0x36, 0xed, 0xd6, 0x2f, 0x3b, 0xd8,
	0xf6, 0x68, 0xbb, 0xee, 0xb6, 0x8d, 0x04, 0x7a, 0x0a, 0x65, 0xd3, 0x6e, 0x38, 0x84, 0xe0, 0x86,
	0xb7, 0x94, 0xd5, 0x3b, 0x4e, 0xcf, 0xf6, 0x8c, 0x1d, 0xf4, 0x1c, 0x9e, 0xb4, 0x4c, 0xbb, 0x6e,
	0xd1, 0x95, 0x4e, 0xc3, 0xf2, 0x2e, 0x28, 0xfe, 0xd8, 0x35, 0xc9, 0xa5, 0xb1, 0x7b, 0x9f, 0x42,
	0xdb, 0xb3, 0x1a, 0x0b, 0x0f, 0x49, 0xf4, 0x18, 0x8e, 0xb4, 0x82, 0x36, 0xa1, 0x9e, 0xe3, 0x50,
	0xd7, 0x71, 0x6c, 0x23, 0x85, 0xf6, 0xa1, 0x60, 0xda, 0x17, 0x75, 0xcb, 0x6c, 0x52, 0x82, 0xeb,
	0x56, 0xc7, 0xd8, 0x43, 0x07, 0x50, 0xda, 0xd6, 0x4b, 0x4b, 0x17, 0x0b, 0x3d, 0xc7, 0x36, 0x1d,
	0x9b, 0x5e, 0x60, 0xe2, 0x9a, 0x8e, 0x6d, 0x64, 0xd0, 0x43, 0x40, 0x9b, 0xa2, 0x76, 0xa7, 0xde,
	0x30, 0xb2, 0xe8, 0x08, 0xf6, 0x37, 0xf1, 0xf7, 0xf8, 0xd2, 0x00, 0x99, 0x06, 0x1d, 0x18, 0x7d,
	0x8b, 0x2d, 0xe7, 0x03, 0xed, 0x98, 0xb6, 0xd9, 0xe9, 0x75, 0x8c, 0x1c, 0x3a, 0x04, 0xa3, 0x85,
	0x31, 0x35, 0x6d, 0xb7, 0xd7, 0x6a, 0x99, 0x0d, 0x13, 0xdb, 0x9e, 0x91, 0xd7, 0x37, 0xdf, 0xf7,
	0xf0, 0x82, 0x34, 0x68, 0xb4, 0xeb, 0xb6, 0x8d, 0x2d, 0xda, 0x34, 0xdd, 0xfa, 0x5b, 0x0b, 0x37,
	0x8d, 0x22, 0x3a, 0x86, 0xc7, 0x1e, 0xee, 0x74, 0x1d, 0x52, 0x27, 0x97, 0x74, 0x21, 0x6f, 0xd5,
	0x4d, 0xab, 0x47, 0xb0, 0x51, 0x42, 0x2f, 0xe0, 0x98, 0xe0, 0x1f, 0x7b, 0x26, 0xc1, 0x4d, 0x6a,
	0x3b, 0x4d, 0x4c, 0x5b, 0xb8, 0xee, 0xf5, 0x08, 0xa6, 0x1d, 0xd3, 0x75, 0x4d, 0xfb, 0x9d, 0x61,
	0xa0, 0xff, 0xc2, 0xc9, 0x52, 0x65, 0xe9, 0x60, 0x4b, 0x6b, 0x5f, 0xbe, 0x6f, 0x51, 0x4f, 0x1b,
	0x7f, 0xf4, 0x68, 0x17, 0x63, 0x62, 0x20, 0x54, 0x81, 0x87, 0xab, 0xeb, 0xf5, 0x05, 0xf1, 0xdd,
	0x07, 0x52, 0xd6, 0xc5, 0xa4, 0x53, 0xb7, 0x65, 0x81, 0x37, 0x64, 0x87, 0x32, 0xec, 0x95, 0x6c,
	0x3b, 0xec, 0xa3, 0xea, 0x9f, 0x3b, 0x50, 0xd8, 0x68, 0x7a, 0xf4, 0x14, 0xb2, 0x91, 0x3f, 0x0c,
	0x98, 0x90, 0x54, 0xd6, 0x2c, 0x5f, 0x01, 0x6a, 0x1b, 0x8c, 0x98, 0x1f, 0xe8, 0xf1, 0xa2, 0xd9,
	0x96, 0x55, 0x88, 0x1a, 0x2e, 0x8f, 0x20, 0xbd, 0xd8, 0x26, 0xbb, 0x8a, 0x20, 0x7b, 0x7d, 0xbd,
	0x45, 0x9e, 0x42, 0x56, 0xce, 0xaf, 0x48, 0xb0, 0xc9, 0x54, 0x71, 0xa7, 0x40, 0x56, 0x00, 0xfa,
	0x0f, 0x2c, 0xa8, 0x46, 0x75, 0xff, 0xa7, 0x94, 0x46, 0x3e, 0x06, 0x5b, 0x12, 0xbb, 0x33, 0x19,
	0x05, 0x8b, 0x19, 0xb4, 0x3e, 0x19, 0x05, 0x43, 0xaf, 0x60, 0x5f, 0xd3, 0xd4, 0x0f, 0xfc, 0xc9,
	0x7c, 0xa2, 0xe9, 0x9a, 0x56, 0xd1, 0x94, 0x14, 0x5d, 0x35, 0xae, 0x58, 0xfb, 0x18, 0x32, 0x57,
	0x2c, 0xe2, 0x72, 0x28, 0xab, 0xf5, 0x57, 0x20, 0x69, 0x79, 0x6e, 0x71, 0x2e, 0x45, 0x72, 0x54,
	0xcf, 0xe4, 0xa0, 0xc8, 0x6a, 0xd1, 0x35, 0xe7, 0x84, 0x09, 0xfe, 0xaa, 0x07, 0xf9, 0xf5, 0xc5,
	0x83, 0x0a, 0x90, 0x35, 0x6d, 0xda, 0xb2, 0xcc, 0x77, 0x6d, 0xcf, 0x78, 0x20, 0x8f, 0x6e, 0xaf,
	0xd1, 0xc0, 0xb8, 0x89, 0x9b, 0x46, 0x02, 0x21, 0x28, 0xca, 0x7c, 0xe3, 0x26, 0xf5, 0xcc, 0x0e,
	0x76, 0x7a, 0x92, 0x7c, 0x07, 0x50, 0x8a, 0x31, 0xdb, 0xa1, 0xc4, 0xe9, 0x79, 0xd8, 0xd8, 0xad,
	0x7d, 0xde, 0x81, 0x3d, 0x35, 0x70, 0x67, 0xc8, 0x82, 0xdc, 0xda, 0x56, 0x45, 0xc7, 0x6b, 0x23,
	0xea, 0xee, 0xdf, 0x95, 0xca, 0xb3, 0x2f, 0x89, 0xe3, 0xb9, 0x6d, 0x41, 0x61, 0x63, 0x19, 0xa3,
	0xe7, 0x6b, 0x06, 0xf7, 0xad, 0xe9, 0x4a, 0xf9, 0xfe, 0x1d, 0x3b, 0x8f, 0xbe, 0x4e, 0xa0, 0xf7,
	0x60, 0xe0, 0x48, 0xf8, 0x13, 0x39, 0x21, 0xe3, 0x3d, 0x87, 0x2a, 0x6b, 0xfa, 0x5b, 0xcb, 0xb3,
	0xf2, 0xe4, 0x5e, 0xd9, 0x32, 0xb4, 0xdc, 0xda, 0xa6, 0xb9, 0xf3, 0xd0, 0xcd, 0xf5, 0x76, 0xe7,
	0xa1, 0x5b, 0x0b, 0xea, 0xed, 0x37, 0x3f, 0x9d, 0x0f, 0x7d, 0x31, 0x9a, 0x5f, 0x9d, 0xf5, 0xc3,
	0xc9, 0xf9, 0xd8, 0x1f, 0x8e, 0x44, 0xe0, 0x07, 0xc3, 0x80, 0x8b, 0x5f, 0xc3, 0xd9, 0xcd, 0xf9,
	0x38, 0x18, 0x9c, 0xab, 0x6d, 0x77, 0xbe, 0x74, 0x73, 0xb5, 0xa7, 0xfe, 0x08, 0x7e, 0xfb, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x5b, 0xfd, 0xa2, 0x38, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	//*
	//SendPayment attempts to route a payment described by the passed
	//PaymentRequest to the final destination. The call returns immediately after
	//it has been assured that there is not already a different payment for the
	//same hash in flight. Further status information can be obtained through a
	//LookupPayment stream.
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error)
	//*
	//LookupPayment returns an update stream for the payment identified by the
	//payment hash. A first update will always be send over the stream
	//immediately. If the payment is not known, it will report state UNKNOWN.
	LookupPayment(ctx context.Context, in *LookupPaymentRequest, opts ...grpc.CallOption) (Router_LookupPaymentClient, error)
	//*
	//EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
	//may cost to send an HTLC to the target end destination.
	EstimateRouteFee(ctx context.Context, in *RouteFeeRequest, opts ...grpc.CallOption) (*RouteFeeResponse, error)
	//*
	//SendToRoute attempts to make a payment via the specified route. This method
	//differs from SendPayment in that it allows users to specify a full route
	//manually. This can be used for things like rebalancing, and atomic swaps.
	SendToRoute(ctx context.Context, in *SendToRouteRequest, opts ...grpc.CallOption) (*SendToRouteResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error) {
	out := new(SendPaymentResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/SendPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) LookupPayment(ctx context.Context, in *LookupPaymentRequest, opts ...grpc.CallOption) (Router_LookupPaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[0], "/routerrpc.Router/LookupPayment", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerLookupPaymentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_LookupPaymentClient interface {
	Recv() (*PaymentStatus, error)
	grpc.ClientStream
}

type routerLookupPaymentClient struct {
	grpc.ClientStream
}

func (x *routerLookupPaymentClient) Recv() (*PaymentStatus, error) {
	m := new(PaymentStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) EstimateRouteFee(ctx context.Context, in *RouteFeeRequest, opts ...grpc.CallOption) (*RouteFeeResponse, error) {
	out := new(RouteFeeResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/EstimateRouteFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) SendToRoute(ctx context.Context, in *SendToRouteRequest, opts ...grpc.CallOption) (*SendToRouteResponse, error) {
	out := new(SendToRouteResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/SendToRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	//*
	//SendPayment attempts to route a payment described by the passed
	//PaymentRequest to the final destination. The call returns immediately after
	//it has been assured that there is not already a different payment for the
	//same hash in flight. Further status information can be obtained through a
	//LookupPayment stream.
	SendPayment(context.Context, *SendPaymentRequest) (*SendPaymentResponse, error)
	//*
	//LookupPayment returns an update stream for the payment identified by the
	//payment hash. A first update will always be send over the stream
	//immediately. If the payment is not known, it will report state UNKNOWN.
	LookupPayment(*LookupPaymentRequest, Router_LookupPaymentServer) error
	//*
	//EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
	//may cost to send an HTLC to the target end destination.
	EstimateRouteFee(context.Context, *RouteFeeRequest) (*RouteFeeResponse, error)
	//*
	//SendToRoute attempts to make a payment via the specified route. This method
	//differs from SendPayment in that it allows users to specify a full route
	//manually. This can be used for things like rebalancing, and atomic swaps.
	SendToRoute(context.Context, *SendToRouteRequest) (*SendToRouteResponse, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_SendPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SendPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/SendPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SendPayment(ctx, req.(*SendPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_LookupPayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LookupPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).LookupPayment(m, &routerLookupPaymentServer{stream})
}

type Router_LookupPaymentServer interface {
	Send(*PaymentStatus) error
	grpc.ServerStream
}

type routerLookupPaymentServer struct {
	grpc.ServerStream
}

func (x *routerLookupPaymentServer) Send(m *PaymentStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_EstimateRouteFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).EstimateRouteFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/EstimateRouteFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).EstimateRouteFee(ctx, req.(*RouteFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_SendToRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SendToRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/SendToRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SendToRoute(ctx, req.(*SendToRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerrpc.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPayment",
			Handler:    _Router_SendPayment_Handler,
		},
		{
			MethodName: "EstimateRouteFee",
			Handler:    _Router_EstimateRouteFee_Handler,
		},
		{
			MethodName: "SendToRoute",
			Handler:    _Router_SendToRoute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LookupPayment",
			Handler:       _Router_LookupPayment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "routerrpc/router.proto",
}
